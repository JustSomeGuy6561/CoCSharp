<UserControl x:Class="CoCWinDesktop.CustomControls.StatBar"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:CoCWinDesktop.CustomControls"
			 Name="_this">
	<Canvas Name="StatBarCanvas" Width="200" Height="28">
		<TextBlock Name="TitleText" Style="{StaticResource CoCSidebarText}" Height="20" Text="{Binding Text, ElementName=_this}"  Panel.ZIndex="100" Canvas.Top="4" Canvas.Left="6" FontSize="15" />
		<TextBlock Name="ValueText" Panel.ZIndex="100" Canvas.Bottom="0" Canvas.Right="30" FontSize="22" >
			<TextBlock.Style>
				<Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CoCSidebarText}">
					<Setter Property="Text" Value="{Binding Value, ElementName=_this}"/>
					<Style.Triggers>
						<DataTrigger Binding="{Binding ShowValueOverMax, ElementName=_this}" Value="true">
							<Setter Property="Text">
								<Setter.Value>
									<MultiBinding StringFormat=" {0}/{1} ">
										<Binding Path="Value" ElementName="_this"/>
										<Binding Path="MaximumValue" ElementName="_this"/>
									</MultiBinding>
								</Setter.Value>
							</Setter>
						</DataTrigger>
					</Style.Triggers>
				</Style>
			</TextBlock.Style>

		</TextBlock>
		<Canvas Name="BarHolder" Canvas.Bottom="0" Height="10" Width="172" Panel.ZIndex="0">
			<Canvas.Style>
				<Style TargetType="{x:Type Canvas}">
					<Setter Property="Background">
						<Setter.Value>
							<ImageBrush ImageSource="/CoCWinDesktop;component/resources/StatsBarBottom.png"/>
						</Setter.Value>
					</Setter>
					<Style.Triggers>
						<DataTrigger Binding="{Binding HasGauge, ElementName=_this}" Value="False">
							<Setter Property="Background" Value="Transparent"/>
						</DataTrigger>
					</Style.Triggers>
				</Style>
			</Canvas.Style>
		</Canvas>
		<!-- For those of you that care and have found this, we do a bit of fudging to mimick the data in original. We stack min and current because it's simpler-->
		<!-- For reasons unknown, the RGB values in the game didn't match with the display. so these rgb values aren't that. this has the same result, but actually makes sense -->
		<Rectangle Name="MinBar" Panel.ZIndex="-1" Canvas.Left="1" Height="28" Fill="{Binding MinColor, ElementName=_this}" Opacity="0.6666666666666667" />
		<!-- Width done in code-behind-->
		<!-- This is why i'd prefer code-behind. It's much easier to write one if statement than 2 converters and a trigger with 5 variables. -->
		<Rectangle Name="FillBar" Panel.ZIndex="-2" Canvas.Left="1" Height="28" Opacity="0.6" Fill="{Binding RegularColor, ElementName=_this}">
			<Rectangle.Effect>
				<DropShadowEffect BlurRadius="10" ShadowDepth="2"/>
			</Rectangle.Effect>
		</Rectangle>
		<Image Name ="Arrow" Height="26" Width="26" Canvas.Right="1" Canvas.Top="1" Visibility="{Binding ArrowVisible, ElementName=_this, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Source="/CoCWinDesktop;component/resources/arrow-up.png"/>
		<!--<Image Name ="Arrow" Height="26" Width="26" Canvas.Right="1" Canvas.Top="1" Visibility="{Binding ArrowVisible, RelativeSource={RelativeSource AncestorType=local:StatBar}, Mode=TwoWay}" Source="/CoCWinDesktop;component/resources/arrow-up.png"/>-->
		<!--<Image Name="UpArrow" Height="26" Width="26" Canvas.Right="1" Canvas.Top="1" Visibility="Hidden" Source="/CoCWinDesktop;component/resources/arrow-up.png"/>
		<Image Name="DownArrow" Height="26" Width="26" Canvas.Right="1" Canvas.Top="1" Visibility="Hidden" Source="/CoCWinDesktop;component/resources/arrow-down.png"/>-->
	</Canvas>
</UserControl>
